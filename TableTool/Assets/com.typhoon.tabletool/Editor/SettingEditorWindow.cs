using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using UnityEditor;
using UnityEngine;
using Debug = UnityEngine.Debug;

namespace Typhoon.TableTool
{
    /// <summary>
    /// 设置菜单
    /// </summary>
    public class SettingEditorWindow : EditorWindow
    {
        [Serializable]
        public class PackageJson
        {
            //版本号
            public string version;
        }


        private static string RootPath
        {
            get
            {
                var path1 = "Packages/com.typhoon.tabletool";
                var path2 = "Assets/com.typhoon.tabletool";
                if (Directory.Exists(path1))
                {
                    return new DirectoryInfo(path1).FullName;
                }

                if (Directory.Exists(path2))
                {
                    return new DirectoryInfo(path2).FullName;
                }

                throw new Exception("找不到路径");
            }
        }


        //配置表安装资源包
        private static string EXCEL_2_JSON_INSTALL_SOURCE => $"{RootPath}/Editor/Excel2Json~";

        //导表程序
        private static string EXCEL_2_JSON_EXE_PATH => $"{EXCEL_2_JSON_INSTALL_FOLDER}/Typhoon.Excel2Json.exe";

        //配置表安装路径
        private static string EXCEL_2_JSON_INSTALL_FOLDER => "./配置表工具";

        //配置表文件夹
        private static string TABLE_FOLDER => $"{EXCEL_2_JSON_INSTALL_FOLDER}/table";

        //table.md文件路径
        private static string TABLE_MD_FILE => $"{TABLE_FOLDER}/table.md";

        //package.json路径
        private static string PACKAGE_JSON => $"{RootPath}/package.json";

        //配置模板
        private static string CONFIG_TEMPLATE => $"{RootPath}/Editor/template/Config.template";

        //tabletool生成文件夹
        private static string GENERATE_TABLE_TOOL_PATH => $"Assets/Typhoon_Gen/TableTool";

        //导出文件夹
        private static string GENERATE_TABLE_TOOL_EXPORT_PATH => $"Assets/Typhoon_Gen/TableTool/Export";

        //配置代码
        private static string CONFIG_PATH => $"{GENERATE_TABLE_TOOL_PATH}/Config.cs";

        //TableHelper.cs模板（Resource模式）
        private static string TABLE_HELPER_RESOURCE_MODE_TEMPLATE =
            $"{RootPath}/Editor/template/TableHelper_ResourceMode.template";

        //TableHelper.cs模板（Addressable模式）
        private static string TABLE_HELPER_ADDRESSABLE_MODE_TEMPLATE =
            $"{RootPath}/Editor/template/TableHelper_AddressableMode.template";

        //TableTool.cs导出路径
        private static string TABLE_TOOL_CSHARP_PATH => $"{GENERATE_TABLE_TOOL_PATH}/TableHelper.cs";

        private const string lOGO_BASE64 =
            "";

        private const string SETTING_BASE64 =
            "";

        //说明文档路径
        private static string DOCUMENT_PATH => $"{RootPath}/Documentation~/README.pdf";
       
        private static Texture2D _settingIcon;

        private static Texture2D SettingIcon
        {
            get
            {
                if (_settingIcon == null)
                {
                    _settingIcon = new Texture2D(128, 128, TextureFormat.RGBA32, false);
                    byte[] data = System.Convert.FromBase64String(SETTING_BASE64);
                    _settingIcon.LoadImage(data);
                }

                return _settingIcon;
            }
        }


        private static Texture2D _logoIcon;

        private static Texture2D LogoIcon
        {
            get
            {
                if (_logoIcon == null)
                {
                    _logoIcon = new Texture2D(128, 128, TextureFormat.RGBA32, false);
                    byte[] data = System.Convert.FromBase64String(lOGO_BASE64);
                    _logoIcon.LoadImage(data);
                }

                return _logoIcon;
            }
        }

        private static Texture2D _errorIcon = null;

        private static Texture2D ErrorIcon
        {
            get
            {
                if (_errorIcon == null)
                {
                    _errorIcon = (Texture2D)typeof(EditorGUIUtility).GetMethod("LoadIcon",
                        BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic |
                        BindingFlags.FlattenHierarchy).Invoke((object)null, new object[1]
                    {
                        (object)"console.erroricon"
                    });
                }

                return _errorIcon;
            }
        }


        [MenuItem("配置表工具/选项")]
        private static void Open()
        {
            var win = GetWindow<SettingEditorWindow>();
            win.minSize = new Vector2(300, 400);
            win.maxSize = win.minSize;
            win.titleContent = new GUIContent("配置表工具", SettingIcon);
            win.Show();
        }

        [MenuItem("配置表工具/打开文件夹")]
        private static void OpenTableFolder()
        {
            //尝试修复文件
            CheckAndRepair();
            try
            {
                //定位到文件夹
                EditorUtility.RevealInFinder(TABLE_MD_FILE);
            }
            catch (Exception e)
            {
                Debug.LogError($"找不到：{TABLE_MD_FILE}");
            }
        }

        [MenuItem("配置表工具/打开文件夹", true)]
        private static bool OpenTableFolderMenuItemValid()
        {
            if (IsInstall())
            {
                return true;
            }

            return false;
        }

        [MenuItem("配置表工具/一键导表")]
        private static void OnKeyExport()
        {
            Export();
        }

        [MenuItem("配置表工具/一键导表", true)]
        private static bool OnKeyExportMenuItemValid()
        {
            if (IsInstall())
            {
                return true;
            }

            return false;
        }

        [MenuItem("配置表工具/说明文档")]
        private static void OpenDocument()
        {
            EditorUtility.OpenWithDefaultApp(DOCUMENT_PATH);
        }


        private string _versionCode = null;

        //是否安装addressable
        private bool _isInstallAddressable = false;

        //反射属性：AddressableAssetSettingsDefaultObject.Settings
        private object _aaDefaultSettings = null;

        private void OnEnable()
        {
            Init();
            try
            {
                var json = File.ReadAllText(PACKAGE_JSON);
                var packageJson = JsonUtility.FromJson<PackageJson>(json);
                _versionCode = packageJson.version;
            }
            catch (Exception e)
            {
            }
        }

        private void OnGUI()
        {
            var temCol = GUI.color;
            if (EditorApplication.isCompiling)
            {
                GUILayout.Label("编译中，请稍等...");
            }
            else
            {
                #region Logo,版本号

                Rect rect = new Rect(0, 0, position.width, position.height);
                Rect logoBgRect = new Rect(rect);
                logoBgRect.height = 64;
                Rect logoRect = new Rect(logoBgRect);
                logoRect.y += 8;
                logoRect.height = 48;
                var style = new GUIStyle(EditorStyles.whiteBoldLabel);
                style.alignment = TextAnchor.MiddleCenter;
                style.normal.textColor = GUI.skin.button.normal.textColor;
                var blockRect = new Rect(logoRect);
                blockRect.width -= 16;
                blockRect.x += 8;
                GUI.Label(blockRect, "", EditorStyles.helpBox);
                GUI.Label(logoRect, new GUIContent("配置表工具", LogoIcon), style);
                //版本号
                Rect versionRect = new Rect(blockRect);
                versionRect.width = 100;
                versionRect.height = 22;
                versionRect.x = blockRect.xMax - versionRect.width;
                versionRect.y = blockRect.yMax - versionRect.height;
                versionRect.x -= 4;
                versionRect.y -= 4;
                GUI.color = new Color(0.05f, 0.54f, 0.86f, 1f);
                var styleLinkLab = new GUIStyle(EditorStyles.boldLabel);
                styleLinkLab.alignment = TextAnchor.LowerRight;
                if (_versionCode != null)
                {
                    GUI.Label(versionRect, $"版本:{_versionCode}", styleLinkLab);
                }

                GUI.color = temCol;

                #endregion

                #region 安装，卸载

                bool isInstall = IsInstall();
                Rect btnSetUp = new Rect(logoBgRect);
                btnSetUp.y += btnSetUp.height;
                btnSetUp.height = 32;
                btnSetUp.y += 2;
                btnSetUp.width = 200;
                btnSetUp.x = rect.center.x - 100;
                if (isInstall)
                {
                    //卸载 
                    GUI.color = new Color(0.86f, 0.31f, 0.25f, 1f);
                    if (GUI.Button(btnSetUp, "卸载"))
                    {
                        Uninstall();
                    }

                    GUI.color = temCol;
                }
                else
                {
                    //判断
                    GUI.color = new Color(0.58f, 1f, 0.4f, 1f);
                    if (GUI.Button(btnSetUp, "安装"))
                    {
                        Install();
                    }

                    GUI.color = temCol;
                }

                #endregion

                #region 设置窗口

                Rect preferenceRect = new Rect(0, btnSetUp.yMax, rect.width, rect.height);
                preferenceRect.y += 10;
                preferenceRect.height = rect.height - preferenceRect.y;
                preferenceRect.width -= 16;
                preferenceRect.x += 8;
                if (isInstall)
                {
                    GUILayout.BeginArea(preferenceRect);

                    if (Preference.Instance != null)
                    {
                        var labLength = 80;

                        #region 加载方式

                        GUILayout.Label("", GUI.skin.horizontalSlider, GUILayout.Height(22));
                        GUILayout.BeginHorizontal();
                        GUILayout.Label("加载方式：", EditorStyles.boldLabel, GUILayout.Width(labLength));
                        Preference.Instance.LoadMode = (LoadMode)EditorGUILayout.EnumPopup(new GUIContent(""),
                            Preference.Instance.LoadMode, LoadModeEnumFunc, true);
                        GUILayout.EndHorizontal();

                        #endregion

                        #region 文件类型

                        GUILayout.BeginHorizontal();
                        GUILayout.Label("文件类型：", EditorStyles.boldLabel, GUILayout.Width(labLength));
                        Preference.Instance.FileType =
                            (JsonFileType)EditorGUILayout.EnumPopup(Preference.Instance.FileType);
                        GUILayout.EndHorizontal();

                        #endregion

                        if (Preference.Instance.LoadMode == LoadMode.Addressable)
                        {
                            #region 自定义addressable路径

                            //addressable组
                            IList groups = null;
                            if (_aaDefaultSettings != null)
                            {
                                groups = (IList)GetPropValue(_aaDefaultSettings, "groups");
                            }


                            if (groups != null)
                            {
                                GUILayout.BeginHorizontal();
                                GUILayout.Label("Group：", EditorStyles.boldLabel, GUILayout.Width(labLength));
                                List<string> groupsName = new List<string>();
                                groupsName.Add("---");
                                foreach (var element in groups)
                                {
                                    //获取name属性
                                    string name = GetPropValue(element, "Name") as string;
                                    groupsName.Add(name);
                                }

                                var selectIndex = 0;
                                for (int i = 0; i < groups.Count; i++)
                                {
                                    var guid = GetPropValue(groups[i], "Guid") as string;
                                    if (Preference.Instance.AddressableGroupGuid == guid)
                                    {
                                        selectIndex = i + 1;
                                    }
                                }

                                var temSelectIndex = selectIndex;
                                selectIndex = EditorGUILayout.Popup(selectIndex, groupsName.ToArray());
                                if (temSelectIndex != selectIndex && selectIndex > 0)
                                {
                                    var group = groups[selectIndex - 1];
                                    var guid = GetPropValue(group, "Guid") as string;
                                    Preference.Instance.AddressableGroupGuid = guid;
                                }

                                GUILayout.EndHorizontal();

                                //导出路径
                                GUILayout.BeginHorizontal();
                                GUILayout.Label("Address：", EditorStyles.boldLabel, GUILayout.Width(labLength));
                                Preference.Instance.Address =
                                    EditorGUILayout.TextField(Preference.Instance.Address);
                                if (string.IsNullOrWhiteSpace(Preference.Instance.Address))
                                {
                                    var lastRect = GUILayoutUtility.GetLastRect();
                                    GUI.Label(lastRect, "不填使用默认值", EditorStyles.centeredGreyMiniLabel);
                                }

                                GUILayout.EndHorizontal();
                            }
                            else
                            {
                                var styleHelpBox = new GUIStyle(EditorStyles.helpBox);
                                styleHelpBox.fontSize = 12;
                                //                                GUI.color = Color.red;
                                GUILayout.Label(new GUIContent("找不到Addressable Setting\n", ErrorIcon),
                                    styleHelpBox);
                                if (Event.current.type == EventType.Repaint)
                                {
                                    var lastRect = GUILayoutUtility.GetLastRect();
                                    var btnCreateAddressableRect = new Rect(lastRect);
                                    //btnCreateAddressableRect
                                    btnCreateAddressableRect.height = 22;
                                    btnCreateAddressableRect.width = 40;
                                    btnCreateAddressableRect.x = lastRect.xMax - btnCreateAddressableRect.width;
                                    btnCreateAddressableRect.y =
                                        lastRect.center.y - btnCreateAddressableRect.height * 0.5f;
                                    btnCreateAddressableRect.x -= 10;
                                }

                                if (GUILayout.Button("去创建"))
                                {
                                    OpenAddressableWindow();
                                    Event.current.Use();
                                }
                            }

                            #endregion
                        }
                    }

                    var temContentCol = GUI.backgroundColor;
                    GUI.backgroundColor = new Color(0.42f, 1f, 0.58f, 1f);
                    GUILayout.Space(3);
                    if (GUILayout.Button("保存配置并应用", GUILayout.Height(32)))
                    {
                        //生成配置
                        SavePreference();
                        Event.current.Use();
                    }

                    GUI.backgroundColor = temContentCol;
                    GUILayout.EndArea();
                }

                #endregion
            }
        }

        private bool LoadModeEnumFunc(Enum loadMode)
        {
            switch (loadMode)
            {
                case LoadMode.Addressable:
                    return _isInstallAddressable;
            }

            return true;
        }

        #region 初始化

        private void Init()
        {
            _isInstallAddressable = IsInstallAddressable();
            _aaDefaultSettings = GetDefaultSettings();
        }

        #endregion

        #region 检查

        //是否已安装
        private static bool IsInstall()
        {
            //是否已安装
            if (File.Exists(EXCEL_2_JSON_EXE_PATH))
            {
                return true;
            }

            return false;
        }

        private static bool IsInstallAddressable()
        {
            return GetAssemblyByNameSpace("UnityEngine.AddressableAssets") != null;
        }

        #endregion

        #region 安装

        //安装
        private void Install()
        {
            //如果存在对应的文件夹
            DebugLogWithColor($"安装到目录-->{EXCEL_2_JSON_INSTALL_FOLDER}", "4ecb52");
            try
            {
                //复制文件到指定目录
                FileUtil.CopyFileOrDirectory(EXCEL_2_JSON_INSTALL_SOURCE, EXCEL_2_JSON_INSTALL_FOLDER);
            }
            catch (Exception e)
            {
            }

            //创建table.md文件
            CreateTableMdFile();
            //创建配置文件
            CreateConfigFile();
            if (IsInstall())
            {
                if (EditorUtility.DisplayDialog(titleContent.text, "安装成功", "打开文件夹", "关闭"))
                {
                    try
                    {
                        //定位到文件夹
                        EditorUtility.RevealInFinder(TABLE_FOLDER);
                    }
                    catch
                    {
                    }
                }
            }
        }

        //创建table md 文件
        private static void CreateTableMdFile()
        {
            //如果不存在
            if (File.Exists(TABLE_MD_FILE))
            {
                File.Delete(TABLE_MD_FILE);
            }

            try
            {
                var json = File.ReadAllText(PACKAGE_JSON);
                var packageJson = JsonUtility.FromJson<PackageJson>(json);
                FileInfo info = new FileInfo(TABLE_MD_FILE);
                var folder = info.Directory.FullName;
                if (!Directory.Exists(folder))
                {
                    Directory.CreateDirectory(folder);
                }

                File.WriteAllText(TABLE_MD_FILE, packageJson.version);
            }
            catch
            {
            }
        }


        //生成配置文件
        private static void CreateConfigFile()
        {
            var loadMode = Preference.Instance.LoadMode;
            var fileType = Preference.Instance.FileType;
            var code = File.ReadAllText(CONFIG_TEMPLATE);
            code = code.Replace("$LoadMode", Preference.Instance.LoadMode.ToString());
            code = code.Replace("$FileType", Preference.Instance.FileType.ToString());
            var address = string.Empty;
            var addressIsValid = CustomAddressableIsValid(Preference.Instance.AddressableGroupGuid);
            switch (loadMode)
            {
                case LoadMode.Resource:
                    break;
                case LoadMode.Addressable:
                    //校验addressable
                    switch (fileType)
                    {
                        case JsonFileType.Json:
                            address = Preference.PATH_ADDRESSABLE_EXPORT_JSON;
                            break;
                        case JsonFileType.Base64:
                            address = Preference.PATH_ADDRESSABLE_EXPORT_BYTES;
                            break;
                    }

                    if (addressIsValid)
                    {
                        //有效，使用自定义地址
                        address = Preference.Instance.Address;
                    }

                    break;
            }

            code = code.Replace("$Address", $"\"{address}\"");
            //检查文件夹
            CheckCreateFolder(GENERATE_TABLE_TOOL_PATH);
            //生成代码
            File.WriteAllText(CONFIG_PATH, code);
            AssetDatabase.Refresh();
        }

        //保存配置
        private void SavePreference()
        {
            EditorUtility.SetDirty(Preference.Instance);
            AssetDatabase.SaveAssets();
            CreateConfigFile();
        }

        #endregion

        #region 卸载

        //卸载
        private void Uninstall()
        {
            if (EditorUtility.DisplayDialog(titleContent.text, "卸载配置表工具，不可撤销！", "是"))
            {
                if (Directory.Exists(EXCEL_2_JSON_INSTALL_FOLDER))
                {
                    string backUpPath;
                    //备份配置表
                    if (BackUpTable(out backUpPath))
                    {
                        //删除
                        Directory.Delete(EXCEL_2_JSON_INSTALL_FOLDER, true);
                        EditorUtility.DisplayDialog(titleContent.text, $"卸载成功\n配置表备份路径：{backUpPath}", "关闭");
                    }
                }
            }
        }

        //备份table
        private bool BackUpTable(out string backUpPath)
        {
            var guid = Guid.NewGuid();
            string guidStr = guid.ToString("N");
            var year = DateTime.Now.Year;
            var month = DateTime.Now.Month;
            var day = DateTime.Now.Day;
            var hour = DateTime.Now.Hour;
            var min = DateTime.Now.Minute;
            var sec = DateTime.Now.Second;
            var millisecond = DateTime.Now.Millisecond;
            var path =
                $"./配置表备份-{year}-{month}-{day}-{hour}{min.ToString().PadLeft(2, ' ')}{sec.ToString().PadLeft(2, ' ')}{millisecond.ToString().PadLeft(3, ' ')}";
            backUpPath = path;
            if (Directory.Exists(TABLE_FOLDER))
            {
                try
                {
                    FileUtil.CopyFileOrDirectory(TABLE_FOLDER, path);
                    if (Directory.Exists(path))
                    {
                        var info = new DirectoryInfo(path);
                        backUpPath = info.FullName;
                        DebugLogWithColor($"备份配置表->{info.FullName}", "62e76e");
                    }

                    return true;
                }
                catch (Exception e)
                {
                }
            }

            return false;
        }

        #endregion

        #region 修复

        //检查并修复
        private static void CheckAndRepair()
        {
            //如果安装
            if (IsInstall())
            {
                //补充文件夹
                CheckCreateFolder(TABLE_FOLDER);
                //补充table.md
                if (!File.Exists(TABLE_MD_FILE))
                {
                    CreateTableMdFile();
                }
            }
        }

        //检查并创建文件夹
        private static void CheckCreateFolder(string path)
        {
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
        }

        #endregion

        #region Debug

        private void DebugLogWithColor(string content, string hex)
        {
            Debug.Log($"<color=#{hex}>{content}</color>");
        }

        #endregion

        #region Addressable部分

        private void OpenAddressableWindow()
        {
            var type = GetType("UnityEditor.AddressableAssets.GUI", "AddressableAssetsWindow");
            if (type != null)
            {
                InvokeReflectMethod(type, "Init", null, BindingFlags.Static | BindingFlags.NonPublic,
                    null);
            }
        }

        private static Type GetTypeOfAddressableSetting()
        {
            return GetType("UnityEditor.AddressableAssets",
                "AddressableAssetSettingsDefaultObject");
        }

        //获取AddressableDefaultSettings
        private static object GetDefaultSettings()
        {
            return GetTypeOfAddressableSetting()?.GetProperty("Settings", BindingFlags.Static | BindingFlags.Public)
                .GetValue(null, null);
        }

        //自定义地址是否有效
        private static bool CustomAddressableIsValid(string groupGuid)
        {
            var settings = GetDefaultSettings();
            if (settings != null)
            {
                var groups = (IList)GetPropValue(settings, "groups");
                foreach (var element in groups)
                {
                    string elementGuid = GetPropValue(element, "Guid") as string;
                    if (elementGuid == groupGuid)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        //获取Addressable Group
        private static object GetAddressableGroup(string guid)
        {
            var settings = GetDefaultSettings();
            if (settings != null)
            {
                var groups = (IList)GetPropValue(settings, "groups");
                foreach (var element in groups)
                {
                    string elementGuid = GetPropValue(element, "Guid") as string;
                    if (elementGuid == guid)
                    {
                        return element;
                    }
                }
            }

            return null;
        }

        #endregion

        //获取成员属性
        public static object GetPropValue(object src, string propName)
        {
            return src.GetType().GetProperty(propName).GetValue(src, null);
        }

        //获取成员属性
        public static void SetPropValue(object src, string propName, object value)
        {
            src.GetType().GetProperty(propName).SetValue(src, value);
        }

        #region 反射

        //获取命名空间所属的Assembly
        public static Assembly GetAssemblyByNameSpace(string nameSpace)
        {
            var ass = AppDomain.CurrentDomain.GetAssemblies();
            Assembly match = null;
            foreach (var assembly in ass)
            {
                var types = assembly.GetTypes();
                foreach (var type in types)
                {
                    if (type.Namespace == nameSpace)
                    {
                        match = assembly;
                        break;
//                        //TODO//跳出
//                        Debug.Log(type.FullName);
                    }
                }
            }

            return match;
        }

        //获取类型
        public static Type GetType(string nameSpace, string typeName)
        {
            var assembly = GetAssemblyByNameSpace(nameSpace);
            return assembly?.GetType($"{nameSpace}.{typeName}");
        }

        /// <summary>
        /// 执行反射方法
        /// target：对象实例（null为类自身）
        /// methodName:方法名
        /// </summary>
        public static object InvokeReflectMethod(Type type, object target, string methodName, BindingFlags bindingAttr,
            object[] args)
        {
            MethodInfo method = type.GetMethod(
                methodName,
                bindingAttr
            );
            return method.Invoke(
                target,
                args
            );
        }


        /// <summary>
        /// 反射获取枚举值
        /// </summary>
        public static dynamic GetEnumValue(string nameSpace, string enumTypeName, string valueName)
        {
            var type = GetType(nameSpace, enumTypeName);
            return type.GetField(valueName)?.GetValue(null);
        }

        #endregion

        private void OnFocus()
        {
            Init();
        }

        #region 导表

        private static void Export()
        {
            //执行程序
            try
            {
                FileInfo fileInfo = new FileInfo($"{EXCEL_2_JSON_INSTALL_FOLDER}/一键导表.bat");
                using (Process proc = new Process())
                {
                    proc.StartInfo.FileName = fileInfo.FullName;
                    proc.StartInfo.WorkingDirectory = EXCEL_2_JSON_INSTALL_FOLDER;
                    proc.Start();
                    proc.WaitForExit();
                    var codeExportFolder = $"{EXCEL_2_JSON_INSTALL_FOLDER}/export/c#";
                    var jsonFile = $"{EXCEL_2_JSON_INSTALL_FOLDER}/export/json/allInOne.json";
                    var bytesFile = $"{EXCEL_2_JSON_INSTALL_FOLDER}/export/allInOne.bytes";
                    if (!File.Exists(jsonFile) && !File.Exists(bytesFile))
                    {
                        throw new Exception("发生错误，导表失败");
                    }

                    //复制文件到路径
                    var exportFolder = $"{EXCEL_2_JSON_INSTALL_FOLDER}/export";
                    if (Directory.Exists(exportFolder))
                    {
                        //删除导出文件夹
                        if (Directory.Exists(GENERATE_TABLE_TOOL_EXPORT_PATH))
                        {
                            Directory.Delete(GENERATE_TABLE_TOOL_EXPORT_PATH, true);
                        }

                        var toCodeFolder = $"{GENERATE_TABLE_TOOL_EXPORT_PATH}/c#";
                        var toJsonFile = $"{GENERATE_TABLE_TOOL_EXPORT_PATH}/Resources/TableTool/allInOne.json";
                        var toBytesFile = $"{GENERATE_TABLE_TOOL_EXPORT_PATH}/Resources/TableTool/allInOne.bytes";
                        //复制代码部分
                        CopyToAndReplaceFolder(codeExportFolder, toCodeFolder);
                        var loadMode = Preference.Instance.LoadMode;
                        var fileType = Preference.Instance.FileType;
                        string tableHelperCode = string.Empty;
                        switch (loadMode)
                        {
                            case LoadMode.Addressable:
                                switch (fileType)
                                {
                                    case JsonFileType.Json:
                                        toJsonFile = $"{GENERATE_TABLE_TOOL_EXPORT_PATH}/allInOne.json";
                                        break;
                                    case JsonFileType.Base64:
                                        toBytesFile = $"{GENERATE_TABLE_TOOL_EXPORT_PATH}/allInOne.bytes";
                                        break;
                                }

                                tableHelperCode = File.ReadAllText(TABLE_HELPER_ADDRESSABLE_MODE_TEMPLATE);
                                break;
                            case LoadMode.Resource:
                                tableHelperCode = File.ReadAllText(TABLE_HELPER_RESOURCE_MODE_TEMPLATE);
                                break;
                        }

                        var dataExportPath = string.Empty;
                        switch (fileType)
                        {
                            case JsonFileType.Json:
                                CopyFileTo(jsonFile, toJsonFile);
                                dataExportPath = toJsonFile;
                                break;
                            case JsonFileType.Base64:
                                CopyFileTo(bytesFile, toBytesFile);
                                dataExportPath = toBytesFile;
                                break;
                        }

                        //导出TableTool.cs
                        File.WriteAllText(TABLE_TOOL_CSHARP_PATH, tableHelperCode);

                        AssetDatabase.Refresh();
                        //绑定Addressable资源
                        if (dataExportPath != null && loadMode == LoadMode.Addressable)
                        {
                            if (File.Exists(dataExportPath))
                            {
                                if (!CustomAddressableIsValid(Preference.Instance.AddressableGroupGuid))
                                {
                                    throw new Exception($"找不到匹配 Group GUID：{Preference.Instance.AddressableGroupGuid}");
                                }
                                else
                                {
                                    //如果有效
                                    var group = GetAddressableGroup(Preference.Instance.AddressableGroupGuid);
                                    var settings = GetDefaultSettings();
                                    var guid = AssetDatabase.AssetPathToGUID(dataExportPath);
                                    var entry = InvokeReflectMethod(settings.GetType(), settings, "CreateOrMoveEntry",
                                        BindingFlags.Public | BindingFlags.Instance, new[] { guid, group, null, null });
                                    SetPropValue(entry, "address", dataExportPath);
                                    if (!string.IsNullOrWhiteSpace(Preference.Instance.Address))
                                    {
                                        //重写地址 
                                        SetPropValue(entry, "address", Preference.Instance.Address);
                                    }

                                    var enumValue = GetEnumValue("UnityEditor.AddressableAssets.Settings",
                                        "AddressableAssetSettings+ModificationEvent",
                                        "EntryMoved");
                                    //You'll need these to run to save the changes!
                                    var target = settings as UnityEngine.Object;
                                    EditorUtility.SetDirty(target);
                                    AssetDatabase.SaveAssets();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private static void CopyToAndReplaceFolder(string src, string dest)
        {
            if (Directory.Exists(src))
            {
                if (!Directory.Exists(dest))
                {
                    Directory.CreateDirectory(dest);
                }

                FileUtil.ReplaceDirectory(src, dest);
            }
        }

        private static void CopyFileTo(string src, string dest)
        {
            FileInfo destInfo = new FileInfo(dest);
            if (!Directory.Exists(destInfo.Directory.FullName))
            {
                Directory.CreateDirectory(destInfo.Directory.FullName);
            }

            FileUtil.CopyFileOrDirectory(src, dest);
        }

        #endregion
    }
}